[package]
name = "library-checker"
version = "0.1.0"
authors = ["marimo-KD <marimo.for.others@gmail.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
algebra = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/algebra" }
algebra_struct = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/algebra_struct" }
binary_search = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/binary_search" }
binary_trie = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/binary_trie" }
bit_vector = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/bit_vector" }
chminmax = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/chminmax" }
combination = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/combination" }
cuckoo_hashing = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/cuckoo_hashing" }
extended_gcd = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/algorithm/extended_gcd" }
fenwick_tree = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/fenwick_tree" }
fft = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/algorithm/fft" }
fps = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/fps" }
fps_diff = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/fps_diff" }
geometry = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/geometry" }
lazy_segment_tree = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/lazy_segment_tree" }
mo = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/algorithm/mo" }
my_range = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/my_range" }
ntt = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/algorithm/ntt" }
partly_persistent_unionfind = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/partly_persistent_unionfind" }
persistent_segment_tree = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/persistent_segment_tree" }
persistent_skew_binary_list = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/persistent_skew_binary_list" }
potential_unionfind = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/potential_unionfind" }
randomized_binary_search_tree = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/randomized_binary_search_tree" }
run_length_encoding = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/algorithm/run_length_encoding" }
scanner = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/scanner" }
segment_tree = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/segment_tree" }
splay_tree = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/splay_tree" }
static_modint = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/utility/static_modint" }
unionfind = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/unionfind" }
wavelet_matrix = { path = "/home/marimo-kd/Dev/CompetitiveProgramming/rust_proconlib/data_structure/wavelet_matrix" }
