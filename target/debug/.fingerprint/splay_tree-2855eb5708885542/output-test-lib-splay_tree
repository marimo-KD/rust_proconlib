{"message":"type annotations needed for `SplayTree<T>`","code":{"code":"E0283","explanation":"An implementation cannot be chosen unambiguously because of lack of information.\n\nErroneous code example:\n\n```compile_fail,E0283\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct Impl;\n\nimpl Generator for Impl {\n    fn create() -> u32 { 1 }\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let cont: u32 = Generator::create();\n    // error, impossible to choose one of Generator trait implementation\n    // Should it be Impl or AnotherImpl, maybe something else?\n}\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to use a concrete\ntype:\n\n```\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let gen1 = AnotherImpl::create();\n\n    // if there are multiple methods with same name (different traits)\n    let gen2 = <AnotherImpl as Generator>::create();\n}\n```\n"},"level":"error","spans":[{"file_name":"data_structure/splay_tree/src/lib.rs","byte_start":5668,"byte_end":5674,"line_start":188,"line_end":188,"column_start":13,"column_end":19,"is_primary":false,"text":[{"text":"        let mut st = SplayTree::none();","highlight_start":13,"highlight_end":19}],"label":"consider giving `st` the explicit type `SplayTree<T>`, where the type parameter `T` is specified","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"data_structure/splay_tree/src/lib.rs","byte_start":5677,"byte_end":5692,"line_start":188,"line_end":188,"column_start":22,"column_end":37,"is_primary":true,"text":[{"text":"        let mut st = SplayTree::none();","highlight_start":22,"highlight_end":37}],"label":"cannot infer type for type parameter `T`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"data_structure/splay_tree/src/lib.rs","byte_start":2043,"byte_end":2064,"line_start":67,"line_end":67,"column_start":5,"column_end":26,"is_primary":false,"text":[{"text":"    pub fn none() -> Self {","highlight_start":5,"highlight_end":26}],"label":"required by `SplayTree::<T>::none`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `_: Monoid`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed for `SplayTree<T>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata_structure/splay_tree/src/lib.rs:188:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn none() -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by `SplayTree::<T>::none`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut st = SplayTree::none();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type parameter `T`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mconsider giving `st` the explicit type `SplayTree<T>`, where the type parameter `T` is specified\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: cannot satisfy `_: Monoid`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0283`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0283`.\u001b[0m\n"}
